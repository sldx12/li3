#ifndef PARSING_H_
#define PARSING_H_
#include <stdio.h>
typedef struct commits *COMMIT;
typedef struct user *USER;
typedef struct repo *REPO;
typedef struct arrayU *aUsers;
typedef struct arrayR *aRepos;
typedef struct arrayC *aCommit;
USER build_user(char line[]);
REPO build_repo(char line[]);
COMMIT build_commit(char line[]);
aUsers initializeArrayU(aUsers aU);
void insertArrayU(aUsers aU,USER u);
aRepos initializeArrayR(aRepos aR);
void insertArrayR(aRepos aR,REPO r);
float RUsers(FILE *s,aUsers aU,aCommit aC, int *nBot,int *nUser,int *nOrg,float *nColab);
float RRepos(FILE *s,aRepos aR);
float RCommit(FILE *s,aCommit aC);
aCommit initializeArrayC(aCommit aC);
void insertArrayC(aCommit aC,COMMIT c);
void freeaUsers(aUsers aU);
void freeaRepos(aRepos aR);
void freeaCommit(aCommit aC);
int binarySearchC(aCommit aC, int fstP, int lastP, int aID);
int partitionC(aCommit aC, int i, int uP);
void quickSortC(aCommit aC, int i, int uP);
int celulasOcupC(aCommit aC);
int getsizeofC(aCommit aC);
int getsizeofU(aUsers aU);
int getsizeofR(aRepos aR);
int giveAutID(aCommit aC,int i);
int celulasOcupU(aUsers aU);
void quickSortU(aUsers aU, int i, int uP);
int partitionU(aUsers aU, int i, int uP);
COMMIT giveCommit(aCommit aC,int ind);
int binarySearchU(aUsers aU, int fstP, int lastP, int ID);
int getAuthorID(COMMIT cmt);
int getCommitterID(COMMIT cmt);
char *getUserType(USER us);
int getUserID(USER us);
int getRepoID(COMMIT cmt);
char *getLoginU(USER us);
void quickSortCcmt_id(aCommit aC, int i, int uP);
int partitionCcmt_id(aCommit aC, int i, int uP);
USER giveUser(aUsers aU,int ind);
char *getCommit_at(COMMIT cmt);
char * giveLogin(USER us);
int celulasOcupR(aRepos aR);
int partitionR(aRepos aR, int i, int uP);
void quickSortR(aRepos aR, int i, int uP);
int getIDR(aRepos aR,int ind);
int binarySearchR(aRepos aR, int fstP, int lastP, int ID);
int getRpsID(COMMIT cmt);
char *getLangR(aRepos aR,int ind);
char *getDataCommit(COMMIT cmt);
char *getDescR(aRepos aR,int ind);
#endif